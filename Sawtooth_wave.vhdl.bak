library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

entity Sawtooth is
   Port    ( reset      : in STD_LOGIC;
			 clk		: in STD_LOGIC;
             khz_clk    : in STD_LOGIC;
             pwm_out    : out STD_LOGIC					--ADD MAXCOUNT TO CONTROL THE FREQUENCY OF THE SAWTOOTH
           );
end Sawtooth;

architecture Behavioral of Sawtooth is

signal duty_cycle: STD_LOGIC_VECTOR (8 downto 0);


component PWM_DAC is
    Generic ( width : integer := 9);
    Port ( reset : in STD_LOGIC;
           clk : in STD_LOGIC;
           duty_cycle : in STD_LOGIC_VECTOR (width-1 downto 0);
           pwm_out : out STD_LOGIC
          );
end PWM_DAC;

--ADD A SECOND DOWNCOUNTER


begin

pwm: PWM_DAC
PORT MAP
	generic map (width => 9)
    port map (
        reset => reset,
        clk => clk,
        duty_cycle => duty_cycle,
        pwm_out => pwm_out
        );

--NEED A COUNTER(can just use clk for a 1khz freq) THAT COUNTS UP TO 1MS TO INCREMENT DUTYCYCLE BY A CERTAIN VALUE
-- NEED A SECOND DOWNCOUNTER IF WANTING A FREQUENCY LESS THAN 1khz
-- THE DUTYCYCLE IS THEN FED INTO THE PWM_DAC
--ONCE COUNTER REACHES MAX VALUE RESETS TO 0, WHICH ALSO RESETS DUTYCYCLE TO 0
-- THE MAX VALUE OF THE COUNTER IS AN INPUT THAT WILL BE FED USING AN EXTERNAL LUT
-- EXTERNAL LUT IS CONTROLLED BY EXTERNAL PUSH BUTTONS

increment_process: process (khz_clk, reset) --(switch presses also affect the output, remember to add)
	if( reset = '1') then
           duty_cycle <= (others => '0');
       elsif (duty_cycle = "111111111")
			duty_cycle <= '0';
	   else (rising_edge(khz_clk)) then 
           duty_cycle <= duty_cycle + '1';
	end if;
end process;	


  
end Behavioral;